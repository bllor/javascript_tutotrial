사용자와 웹사이트가 상호작용할 때 이벤트가 발생한다.
자바스크립트가 이벤트를 감지할 수 있게 이벤트 리스너를 추가한다.

1.이벤트리스너 추가하기
이벤트 리스너를 추가할 때는 addEventListener()라는 메서드를 사용합니다.
태그.addEventListener('<이벤트 이름>',<이벤트 리스트>)

ex)
버튼 태그에 클릭 이벤트를 주는 경우 
const onCLickButton=()=>{
    console.log('버튼 클릭');
}

const $button = document.querySelector('button');
$button.addEventListener('Click',onCLickButton);
이벤트의 이름은 click이고, 버튼을 클릭하면 onCLickButton이 실행됩니다.
이 때 onCLickButton()을 넣으면 안됩니다.
함수명에 소괄호를 붙이면 클릭과 상관없이 함수가 실행됩니다.

2.이벤트 리스너 제거하기
addEventListener()로 연결한 함수는 removeEventListener()메서드로 제거할 수 있다.
단, 연결한 함수와 제거하는 함수는 같아야 한다.

const onCLickButton=()=>{
    console.log('버튼 클릭');
}

const $button = document.querySelector('button');
$button.addEventListener('Click',onCLickButton);
$button.removeEventListener('Click',onCLickButton);
버튼을 클릭해도 아무 일도 일어나지 않습니다.

$button.addEventListener('Click',()=>{
    console.log('버튼클릭2')
});
$button.removeEventListener('Click',()=>{
    console.log('버튼클릭2')
});
이렇게 작성할 경우 click이벤트 리스너는 제거되지 않습니다.
addEventListener와 removeEventListener에 같은 함수를 넣은 것처럼 보이지만 객체라 서로 다르게 인지합니다.
그래서 함수명을 넣어서 이벤트를 사용하는 것이 좋습니다.

*
마우스 우클릭을 감지하려면 contextmenu이벤트를 사용하면 된다.

3.이벤트 버블링과 캡쳐링
[1]이벤트 버블링
이벤트가 발생할 때 부모 태그에도 동일한 이벤트가 발생하는 현상
이벤트 버블링 현상이 일어나면 이벤트 리스너 콜백함수의 event.target은 이벤트가 처음 발생한 태그로 바뀌므로 주의해야 합니다.
이벤트가 발생한 태그가 아닌 이벤트를 연결한 태그에 접근하고 싶으면 event.currentTarget을 사용해야 합니다.
[2]이벤트 캡처링
이벤트가 자식태그로 전파되어 내려가는 현상
addEventListener()의 세번 째 인수로 true를 넣으면 이벤트가 부모 태그에서 자식 태그로 전파됩니다.
