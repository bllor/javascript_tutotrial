3.1. 비동기와 타이머
동기 : 앞선 작업이 완전히 끝난 후에 다음 작업이 실행되는 것
비동기 : 앞선 작업이 끝나지 않았는데도 다음 작업이 실행되는 것

1.setTimeout()
지정한 시간 뒤에 코드가 실행되게 하는 것
setTimeout(함수,밀리초);
밀리초 후에 함수가 실행이 된다.

*
타이머의 시간은 정확하지 않다.
자바스크립트는 기본적으로 한 번에 한 가지 일만 할 수 있습니다.
따라서 이미 많은 일을 하고 있다면 설정한 시간이 되어도 setTimeout()에 지정한 작업이 수행되지 않을 수 있습니다.


2.setInterval()
지정한 시간마다 주기적으로 지정한 함수를 실행한다.
setInterval(함수,밀리초);

3.clearTimeout(), clearInterval()
setTimeout과 setInterval은 웹 페이지를 닫을 때까지 계속 실행되므로 중간에 끄는 방법이 필요하다.
setTimeout은 clearTimeout으로, setInterval은 clearInterval으로 끌 수 있다.
단, clearTimeout()함수는 setTimeout()함수의 콜백 함수가 아직 실행되지 않았을 때만 취소가 가능하다.

*
const timerId = setTimeout(()=>{
    console.log('0초 뒤에 실행')
},0);
console.log('내가 먼저')
clearTimeout(timerId);
setTimeout의 밀리초가 0초입니다. 이 말은 바로 실행하라는 것이 됩니다.
콘솔을 실행시켜보면 내가 먼저만 출력될 뿐 0초뒤에 실행은 출력되지 않습니다.
그 이유는 setTimeout()은 비동기 함수라서 그렇습니다.
비동기 함수라서 console.log(), clearTimeout()이 실행된 다음 실행됩니다.