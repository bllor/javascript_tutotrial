프로미스와 async/await

1.프로미스
프로미스는 Promise라는 클래스를 사용하는 문법
new를 붙여 promise클래스를 호출하면 프로미스 객체를 생성하는데, 이 때 인수로 콜백함수를 넣습니다.
콜백함수 내부에는 resolve()나 reject() 둘 중에 하나를 호출하는데, resolve()는 성공, reject()는 실패를 뜻합니다.

ex)
const <프로미스 객체> = new Promise((resolve,reject)=>{
    resolve();
    reject();
})
프로미스 객체에는 then()메서드나 catch()메서드를 붙일 수 있는데,
then()은 resolve()일 때, catch()는 reject()일 때 붙혀 사용합니다.

ex)
const p1 = new Promise((resolve,reject)=>{
    resolve('success')
});
p1.then((data)=>console.log(data))--> 'success'출력

const p2 = new Promise((resolve,reject)=>{
    reject('error')
});
p2.catch((error)=>console.log(error))--> 'error'출력

ex)
const setTimeoutPromise = (ms)=> new Promise((resolve,reject)=>{
    setTimeout(resolve,ms)
});
setTimeoutPromise(3000).then(()=>{
    console.log('3초 뒤 실행됩니다.')
})

then()이나 catch()메서드는 연달아 사용할 수 있습니다.

const promise = new Promise(0);
promise.then(()=>{
    return 'a'
})
.then((data)=>{
    cosole.log(data)->a출력
    return 'b'
})
.then((data)=>{
    console.log(data) --> 'b'출력
})
앞선 then()콜백 함수의 반환한 값이 다음 then()콜백 함수의 매개변수로 전달됩니다.

프로미스에는 finally()메서드도 있습니다.
finally()메서드는 무조건 실행됩니다.

*
프로미스를 콘솔창에 입력하면 fulfilled, rejected, pending이 나오는데
fulfilled : 성공
rejected : 실패
pending : 대기
를 뜻합니다

*
프로미스가 reject()또는 resolve()되는 순간 then()이나 catch()의 콜백 함수가 테스크 큐에 들어갑니다.

const promise = new Promise((resolve, reject)=>{
    setTimeout(()=>{
        console.log('a')
    })
    resolve()
})
promise.then(()=>{
    console.log('b')
})

b
a
순으로 출력이 된다.
순서상 setTimeout()의 콜백함수가 테스크 큐에 들어간 뒤, then()의 콜백함수가 테스크 큐에 들어옵니다.
호출 스택이 비었을 때 이벤트 루프는 테스크 큐에 있는 프로미스 콜백함수는 프로미스가 아닌 콜백함수보다 먼저 호출스택으로 올라가므로
then()이 먼저 실행되고, 그 다음 setTimeout()이 실행됩니다.
