3.2. 스코프와 클로저

1.블록 스코프와 함수 스코프
스코프 : 범위
var은 함수 스코프, let은 블록 스코프입니다.
함수스코프는 함수 안에서만 사용이 가능합니다.
블럭스코프는 {}내에 선언될 경우, {}를 벗어나면 사용할 수 없습니다.

if(true){
    var a= 1;
    let b = 2;
}
console.log(a)--> 1출력
console.log(b)--> 오류 발생

function func1(){
    var a= 1;
    let b = 2;
}
console.log(a)--> 오류 발생
console.log(b)--> 오류 발생

function func1(){
    var a= 1;
    let b = 2;

    console.log(b) --> 2출력
}


2.클로저
클로저: 외부 값에 접근하는 함수

ex)
const a = 1;
const func = ()=>{
    console.log(a)
}
func();
func()함수는 자신의 외부에 있는 변수 a1를 사용하고 있습니다.
func()함수는 클로저 입니다.


const func2 = ()=>{
    console.log(a)
}

if(true){
    const a = 1;
    func2();
}
-->a is undefined오류가 발생한다
변수 a는 if 문 안에서 선언되었고, func()함수는 if문 바깥에서 선언되었습니다.
const는 블럭 스코프이므로 if 문 바깥에서는 변수 a에 접근할 수 없습니다.
func()함수도 if문 바깥에 있으므로 변수 a에 접근할 수 없습니다.

이처럼 함수가 선언된 위치에 따라 접근할 수 있는 값이 달라지는 현상을 함수는 정적 스코프를 따른다라고 표현합니다.
선언된 위치가 아니라 호출된 위치에 따라 접근할 수 있는 값이 달라진다면 동적 스코프를 따르게 되는데, 자바스크립트는 정적스코프를 따릅니다.


const number= [1,3,5,7]
for(var i =0; i<number.length;i++){
    setTimeout(()=>{
        console.log(number[i])
    },1000*(i+1))
}
console.log(number[i])는 외부 변수 i에 접근하는 클로저입니다.
이 때 1000*(i+1)과 console.log(number[i])가 같은 시점에 시작된다고 생각할 수 있습니다.
그러나 setTimeout()인수인 1000*(i+1)은 반복문이 돌 때 실행되고, 클로저는 지정한 시간 뒤에 호출 됩니다.
그런데 반복문은 매우 빠른 속도로 돌아서 클로저가 실행될 때는 이미 i가 4가 되어 있습니다.
따라서 클로저가 실행될 때 이미 i는 4가되어 i를 출력하면 4가 출력됩니다.
그리고 numbers의 인덱스는 3밖에 없으므로 numbers[4]는 undefined가 됩니다.

const number= [1,3,5,7]
for(let i =0; i<number.length;i++){
    setTimeout(()=>{
        console.log(number[i])
    },1000*(i+1))
}

let을 쓸 때는 문제가 발생하지 않는데 그 이유를 확인해보자.
for문에서 사용한 let은 반복문이 돌 때마다 새로운 블록을 생성합니다.
그리고 블록별로 i의 변수값이 고정됩니다.
따라서 클로저 내부의 i변수도 setTimeout()함수를 호출할 때의 i 변수와 같은 값이 들어갑니다
var를 사용하면서 문제를 해결하고 싶으면 클로저가 i 변수 대신 고정된 값을 가리키게 하면 됩니다.

const number= [1,3,5,7]

function helper(j){
    return ()=>{
        console.log(number[j],j)
    }
}

for(var i =0; i<number.length;i++){
    setTimeout(()=>helper(i),1000*(i+1))
}


