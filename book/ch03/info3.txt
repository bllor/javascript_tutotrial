3.3. 호출스택과 이벤트 루프
호출스택 : 동기 코드를 담당

이벤트 루프: 비동기 코드를 담당

백그라운드 : 타이머를 처리하고 이벤트 리스너를 저장하는 공간
-타이머 함수가 실행되면 백그라운드에서 시간을 재다가 지정 시간이 되면 콜백함수를 테스트 큐로 보냅니다.
 또한 이벤트리스너로 추가한 이벤트를 저장했다가 이벤트가 발생하면 콜백함수를 태스크 큐로 보냅니다.

테스크 큐 : 실행될 콜백함수들이 대기하는 공간 
- 테스크 큐에서 함수를 직접실행하지 않고 기다리고만 있다. 실행은 호출스택에서 실행

이벤트 루프 : 테스크 큐에서 호출스택으로 함수를 이동시키는 존재

호출스택         백그라운드
  |                |
  |                |
  |                |
이벤트 루프  <--- 테스크 큐
와 같은 구조를 가지고 있다.

1.호출스택
호출 스택과 이벤트 루프는 함수호출과 밀접한 관련이 있다.
function a{
    console.log('a')
}
function b{
    console.trace()
}
a()
에서 함수가 호출되는 첫 순간은 a()입니다.
사실 자바스크립트 엔진은 자바스크립트 코드가 처음 실행되는 순간에도 하나의 함수가 실행된다고 봅니다.
이 함수에는 이름이 없으므로 크롬 웹 브라우저는 이를(anonymous)로 표시합니다.

console.trace()는 함수의 호출 스택을 보여주는 메서드 입니다.
콘솔을 실행해보면 
b
a
anonymous
순으로 쌓여 있습니다.
이는 호출된 함수의 역순입니다.
호출스택은 마지막에 넣은 물건이 가장 먼저 빠지는 순서로 되어있으므로, 제일 마지막에 들어온 b먼저 출력됩니다.
anonymous가 호출스택을 빠져 나가면 전체코드가 종료됩니다.

2.이벤트 루프
이벤트 루프는 호출스택이 비어있을 때 테스크 큐에서 호출스택으로 함수를 이동시키는 역할을 합니다.

const timerId = setTimeout(()=>{
    console.log('0초뒤 실행')
},0)
console.log('내가먼저될까?')

1)호출스택에 setTimeout이 들어오면 백그라운드로 이동되고, 호출스택에서 빠져나옵니다.
2)호출스택에 console.log('내가먼저될까?')이 들어옵니다.
3)console.log('내가먼저될까?')가 실행되고 빠져나갑니다
4)anonymous함수도 같이 빠져나갑니다.
5)백그라운드에서는 setTimeout에 지정된 시간이 지난 뒤 호출스택이 비면 태스크 큐로 보냅니다.
anonymous함수가 빠져나가면 전체 코드가 종료된다고 했엇는데,
anonymous함수가 빠져나간 후 백그라운드와 테스크 큐에도 함수가 없어야 전체 코드가 종료됩니다.
이벤트 루프는 호출스택이 비어있을 때 움직입니다.
6)콜백함수가 호출스택으로 보내지고, 그 다음 console.log('0초뒤 실행')이 보내집니다.
7)console.log가 종료되면 콜백함수도 종료되어 호출스택에서 빠져나갑니다.
8)호출스택, 백그라운드,테스크 큐가 모두 비면 자바스크립트 코드가 종료됩니다.

*
clearTimeout(), clearInterval()은 어떻게 취소할까?
--> 이벤트 루프에서 알 수 있습니다.
const timerId = setTimeout(()=>{
    console.log('0초뒤 실행')
},0)
console.log('내가먼저될까?')
clearTimeout(timerId)

호출스택에는
clearTimeout(timerId)
console.log('내가먼저될까?')
순으로 쌓입니다.

clearTimeout(timerId)이 백그라운드에 있는 콜백함수를 제거합니다.



3.재귀함수
어떤 함수가 내부에서 자기 자신을 다시 호출하는 함수


function aaa(){
    setTimeout(()=>{
        console.log('d');
    },0);
    console.log('c');
}

setTimeout(()=>{
    console.log('a');
    aaa();
},0);

setTimeout(()=>{
    aaa();
    console.log('b');
},0);

진행순서
a,c,c,b,d,d
소스코드가 실행되면
setTimeout
setTimeout
anonymous
순으로 쌓인다.

setTimeout들은 백그라운드로 이동하고, anonymous는 종료된다.

setTimeout(()=>{
    console.log('a');
    aaa();
},0);
가 테스크 큐로 이동 -> 호출 스택으로 간다.
호출스택으로 이동하면 console.log(a)가 실행되고, 그 다음 aaa()가 실행된다.
function aaa(){
    setTimeout(()=>{
        console.log('d');
    },0);
    console.log('c');
}
aaa는 setTimeout이므로 다시 백그라운드에 들어가고, 호출스택은 끝이 난다.
그 다음에 console.log('c')가 실행이 된다.
이 때 두 번째 타이머의 콜백함수가 호출스택으로 이동한다.
이번에는 aaa()함수가 먼저 호출되어 내부이 setTimeout()타이머가 백그라운드에 등록됩니다.
console.log('c')가 수행된 뒤 aaa()는 종료됩니다.
마지막으로 console.log('b')가 수행된 뒤 두 번째 타이버도 종료됩니다.
남은 것은 백그라운드에 있는 aaa()의 0초 타이머 2개 입니다.
순서대로 테스크 큐로 이동하고, 이벤트 루프에 의해 하나씩 호출스택으로 옮겨진 후 실행됩니다.