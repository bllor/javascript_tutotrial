/*
    테스트를 왜 해야 한느가?
    코드를 수동으로 재실행 하면서 테스트를 하면 무언가를 놓치기 쉽다.
    개발자는 무언가를 만들 때 머릿속에 수많은 유스케이스를 생각하며 코드를 작성하는데, 코드를 변경해야 할 때마다
    모든 유스케이스를 상기하면서 코드를 수정하는 것은 불가능하다.
    테스트 코드를 이용하여 함수를 다양한 조건에서 실행해볼 수 있는데, 이 때 실행 결과와 기대 결과를 비교할 수 있다.
    테스트코드의 장점은
    - 코드에 변화가 있어도 스펙을 실행해 테스트를 진행하면 몇 초 만에 에러 발생 여부를 확인할 수 있다
    - 함수가 어떤 동작을 하는지, 입력값은 무엇이고 출력값은 무엇인지 정의하고 난 후에 구현을 시작하므로 좋은 아키텍쳐를 만들 수 있다.
    

    개발순서
    1.명세서 초안 작성 및 기본적인 테스트
    2.명세서 초안을 보고 코드 작성
    3.테스트 프레임워크를 이용하여 명세서 작성
    4.모든 테스트를 통과하는 코드 초안 작성
    5.명세서에 고려하지 않은 유스케이스 추가
    6.모든 유스케이스가 통과할 때까지 3~5반복

    1.BDD(Behavior Driven Development)
    테스트, 문서, 예시를 한데 모아놓은 개념
    테스트를 할  때 만들어지는 산출물을 BDD에선 명세서(specification) 또는 짧게 줄여 스팩(spec)이라고 부릅니다.
    [1]스팩
    (1)describe("title", function(){ --- })
        구현하고자 하는 기능에 대한 설명이 들어간다.
    (2)it("유스케이스 설명", function(){ --- })
        특정 유스케이스에 대한 설명을 작성하며, 누구나 읽을 수 있고 이해할 수 있는 자연어 사용
    (3)검증(assert.equal ...)

    *before/after beforeEach/afterEach
    before
    전체 테스트가 실행되기 전에 실행됨
    after
    전체 테스트가 실행된 후에 실행 
    beforeEach
    매 it이 실행되기 전에 실행되고,
    afterEach
    매 it이 실행된 후에 실행된다.
    

*/