자료형 : 데이터의 종류
값: 프로그램에서 조작할 수 있는 데이터

1.문자열
문자열 : 문자들이 하나 이상 나열되어 있는 자료형
시작과 끝이 작은 따옴표 또는 큰 따옴표, ``로 감싸진 값
[1]문자열 합치기
'hello'+'world' --> 출력 시 hello world로 출력된다.

2.숫자
숫자는 따옴표로 감싸지 않고 그대로 적으면 됩니다
만약 따옴표로 감쌀 경우 문자열이 됩니다.
실수를 표현하려면 소수점을 사용하면 되고, 음수는 앞에 -기호를 붙이면 됩니다.
2진법은 숫자 앞에 0b
8진법은 숫자 앞에 0o
16진법은 숫자 앞에 0x를 붙이면 됩니다

[1]문자열을 숫자로 변경하는 방법
(1)Number()
Number('3')-->3
Number('3.14')-->3.14
Number는 정수,실수,음수 등 상관없이 변환이 되지만
만약 문자열에 문자가 있을 경우 NaN으로 반환된다는 단점이 있다.
(2)parseInt, parseFloat
parseInt('2등')         --> 2
parseInt(3)         --> 3
parseInt(3.14)      --> 3
parseFloat(3.14)    --> 3.14
parseInt는 문자열을 정수로 변환해주며 정수가 아닐 경우 정수부분만 추출해 표시합니다
만약 실수로 바꾸고 싶으면 parseFloat를 사용하면 됩니다
parseInt는 다른 기수법에을 적용하는 데도 사용합니다
parseInt(111,2)-->7 111을 2진법으로 나타낸 것입니다.

[2]무한 값
숫자를 0으로 나오면 Infinity라는 새로운 값이 나옵니다
이 값은 무한을 나타내므로 사칙연산을 하더라도 결과가 Infinity로 나옵니다
단, 무한끼리 뺄셈을 하거나 나눌 때는 NaN이 나옵니다

[3]문자와 숫자 더하기
'문자열'+0 --> '문자열0'
'1'+0 --> '10'
문자열과 다른 자료형을 더하면 다른 자료형이 문자열로 바뀐 후 더해지는데
이처럼 값의 자료형이 변하는 현상을 형 변환이라고 합니다.
+연산자를 사용할 때는 숫자보다 문자열이 우선시 되어서 숫자가 문자열로 변환이 됩니다.
만약 '문자열'-0을 할 경우 NaN이 나옵니다
-연산자를 사용할 때는 다른 자료형이 먼저 숫자로 형 변환된 후 빼기가 되므로 NaN이 나옵니다

[4]실수 연산시 주의할 점
0.5+0.5-->1
0.1+0.2-->0.300000004로 출력이 됩니다
이는 컴퓨터는 0과 1밖에 알지못하는데 2진법으로 실수를 표현하면 무한 반복되는 실수가 있어서 어쩔 수 없이 근삿값으로 저장합니다
이러한 오류를 막기 위한 가장 간단한 방법은 실수를 정수로 바꿔 계산하고 마지막에 다시 실수로 바꾸는 방법이 있습니다


3.불 값
boolean은 참과 거짓을 나타냅니다
불 값을 표현할 때는 따옴표로 감싸지 않고 true와 false를 입력합니다
!true --> false가 되고
!!true --> true가 됩니다.
'',0,NaN은 불값으로 형변환을 할경우 false가 됩니다.
[1]논리 연산자 사용 시 유의할 점

4.빈 값
[1]undefined
undefined의 자료형은 undefined입니다.
이를 불값으로 형 변환을 하면 false가 나옵니다
단, undefined와 false는 같지 않습니다

[2]null
null도 undefined처럼 값이자 자료형입니다
null은 빈 값을 의미하지만 undefined와 같지 않습니다
null을 불값으로 변환할 경우 false가 나오지만
null의 자료형은 object입니다
따라서 값이 null인지 확인하기 위해서는 ===null을 사용해야 합니다
undefined는 기본값이라는 의미라도 있지만, null은 아무런 역할이 없습니다

2.변수
변수란 값을 저장하고 저장한 값을 불러올 수 있게 하는 것 입니다.
변수를 만드는 행위를 선언라고 표현합니다

[1]let으로 변수 선언하기
let 다음에 선언하려는 변수명을 적고, 그 뒤에 대입 연산자 =를 입력합니다
=연산자 뒤에는 변수에 저장할 식을 입력하면 됩니다
let total = 9000;
이처럼 let으로 시작하는 명령을 선언문이라고 합니다.
또한 변수를 선언함과 동시에 값을 대입하는 행위를 초기화라고 합니다.
(1)변수 값 수정하기
변수는 변하는 숫자라는 의미지만, 실제로는 숫자, 자료형 외에 다양한 자료형의 값으로 저장할 수 있습니다
let change= '변할까?'
console.log(change)-->'변할까?'
change='변했다!' -->'변했다' 출력
--> change='변했다!'에서 값이 나오는 이유는 let의 역할 때문입니다
let이 없을 때는 코드 자체가 식이라서 대입한 값이 결과로 출력되지만,
let이 앞에 붙는 순간 선언문이 되어 결과가 출력되지 않습니다


3.조건문
조건문은 주언진 조건에 따라 코드를 실행하거나 실행하지 않는 문입니다.
조건문은 조건식과 실행문으로 구분됩니다
조건식이 참인 값이면 실행문이 실행되고, 거짓인 값이면 실행문이 실행되지 않습니다
if (조건식)
   실행문
조건문이 false일 때의 실행문을 두고 싶으면 else를 사용하면 됩니다.


4.반복문
[1]while
while(조건식){
    실행문
}
조건식이 참일 동안 반복해서 실행문을 실행합니다

[2]for
for(시작;조건식;종료식)
[3]break
break를 사용할 경우 반복문이 종료가 됩니다
[4]continue
반복조건이 특정 조건에서만 실행되기를 원할 때 사용합니다
continue문을 넣으면 이후 코드는 실행되지 않고 다음 반복으로 건너뜁니다.


5.객체
객체는 다양한 값을 모아둔 또 다른 값입니다
[1]배열
let arr =[]처럼 대괄호로 값들을 한번에 감싸고 각 값은 쉼표로 구분하면 배열을 만들 수 있습니다
배열의 모든 값은 각각 불러올 수 있습니다
배열명 뒤에 대괄호를 붙이고 그 안에 불러오고 싶은 값의 자릿수를 적어주면 됩니다
이런 자릿수를 인덱스라고 하며 프로그래밍에서 인덱스는 0번부터 시작합니다
배열의 값은 요소라고 합니다
(1)배열의 요소 개수 구하기
const arr= [1,2,3,4]
arr.length-->4
(2)배열에 요소 추가하기
a.배열[인덱스번호] = '값'
let arr = [1,2,3,4]
arr[4] = 5
console.log(arr)--> 1,2,3,4,5
arr[7] = 'a'
console.log(arr)--> 1,2,3,4,5,empty,'a'

b.unshift
arr[0] = 0
console.log(arr)--> 0,2,3,4,5,empty,'a'
으로 값이 변하게 되는데
만약 제일 앞에 값을 추가하고 싶으면 unshift를 사용해야 한다.
arr.unshift(11)
console.log(arr)--> 11,0,2,3,4,5,empty,'a'

c.push
push를 사용하면 배열의 맨뒤에 값이 추가가 된다.
arr.push('b')
console.log(arr)--> 11,0,2,3,4,5,empty,'a','b'




*
배열에서 마지막 값을 알고 싶을 때는 [-1]을 사용한다


*
typeof 'hello'-->string으로 출력이 된다.
typeof는 연산자라고 하는데, 연산자는 어떠한 값에 특정 작업을 수행하라는 의미를 나타내는 기호

*
이스케이핑(escaping):기호를 다르게 해석하는 행위
\+기호 를 할 경우 기호를 일반문자로 해석한다.

